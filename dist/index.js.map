{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar defineProperty = require( '@stdlib/utils-define-property' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar isNumber = require( '@stdlib/assert-is-number' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar entropy = require( '@stdlib/stats-base-dists-degenerate-entropy' );\nvar mean = require( '@stdlib/stats-base-dists-degenerate-mean' );\nvar mode = require( '@stdlib/stats-base-dists-degenerate-mode' );\nvar median = require( '@stdlib/stats-base-dists-degenerate-median' );\nvar stdev = require( '@stdlib/stats-base-dists-degenerate-stdev' );\nvar variance = require( '@stdlib/stats-base-dists-degenerate-variance' );\nvar cdf = require( '@stdlib/stats-base-dists-degenerate-cdf' );\nvar mgf = require( '@stdlib/stats-base-dists-degenerate-mgf' );\nvar pdf = require( '@stdlib/stats-base-dists-degenerate-pdf' );\nvar pmf = require( '@stdlib/stats-base-dists-degenerate-pmf' );\nvar logcdf = require( '@stdlib/stats-base-dists-degenerate-logcdf' );\nvar logpdf = require( '@stdlib/stats-base-dists-degenerate-logpdf' );\nvar logpmf = require( '@stdlib/stats-base-dists-degenerate-logpmf' );\nvar quantile = require( '@stdlib/stats-base-dists-degenerate-quantile' );\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction degenerateCDF( x ) {\n\treturn cdf( x, this.mu );\n}\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n*/\nfunction degenerateLogCDF( x ) {\n\treturn logcdf( x, this.mu );\n}\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n*/\nfunction degenerateLogPDF( x ) {\n\treturn logpdf( x, this.mu );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction degeneratePDF( x ) {\n\treturn pdf( x, this.mu );\n}\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n*/\nfunction degenerateLogPMF( x ) {\n\treturn logpmf( x, this.mu );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction degenerateMGF( t ) {\n\treturn mgf( t, this.mu );\n}\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n*/\nfunction degeneratePMF( x ) {\n\treturn pmf( x, this.mu );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction degenerateQuantile( p ) {\n\treturn quantile( p, this.mu );\n}\n\n\n// MAIN //\n\n/**\n* Degenerate distribution constructor.\n*\n* @constructor\n* @param {number} [mu=0.0] - constant value of distribution\n* @throws {TypeError} `mu` must be a number\n* @returns {Degenerate} distribution instance\n*\n* @example\n* var degenerate = new Degenerate();\n*\n* var y = degenerate.cdf( 1.8 );\n* // returns 1.0\n*\n* var v = degenerate.median;\n* // returns 0.0\n*/\nfunction Degenerate() {\n\tvar mu;\n\tif ( !(this instanceof Degenerate) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Degenerate();\n\t\t}\n\t\treturn new Degenerate( arguments[ 0 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tmu = arguments[ 0 ];\n\t\tif ( !isNumber( mu ) || isnan( mu ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Mean parameter `%s` must be a number. Value: `%s`.', 'mu', mu ) );\n\t\t}\n\t} else {\n\t\tmu = 0.0;\n\t}\n\tdefineProperty( this, 'mu', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn mu;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isNumber( value ) || isnan( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tmu = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Degenerate distribution differential entropy.\n*\n* @name entropy\n* @memberof Degenerate.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var degenerate = new Degenerate( 20.0 );\n*\n* var v = degenerate.entropy;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Degenerate.prototype, 'entropy', function get() {\n\treturn entropy( this.mu );\n});\n\n/**\n* Degenerate distribution expected value.\n*\n* @name mean\n* @memberof Degenerate.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var degenerate = new Degenerate( 20.0 );\n*\n* var v = degenerate.mean;\n* // returns 20.0\n*/\nsetReadOnlyAccessor( Degenerate.prototype, 'mean', function get() {\n\treturn mean( this.mu );\n});\n\n/**\n* Degenerate distribution mode.\n*\n* @name mode\n* @memberof Degenerate.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var degenerate = new Degenerate( 20.0 );\n*\n* var v = degenerate.mode;\n* // returns 20.0\n*/\nsetReadOnlyAccessor( Degenerate.prototype, 'mode', function get() {\n\treturn mode( this.mu );\n});\n\n/**\n* Degenerate distribution median.\n*\n* @name median\n* @memberof Degenerate.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var degenerate = new Degenerate( -0.4 );\n*\n* var v = degenerate.median;\n* // returns -0.4\n*/\nsetReadOnlyAccessor( Degenerate.prototype, 'median', function get() {\n\treturn median( this.mu );\n});\n\n/**\n* Degenerate distribution standard deviation.\n*\n* @name stdev\n* @memberof Degenerate.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var degenerate = new Degenerate( 40.0 );\n*\n* var v = degenerate.stdev;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Degenerate.prototype, 'stdev', function get() {\n\treturn stdev( this.mu );\n});\n\n/**\n* Degenerate distribution variance.\n*\n* @name variance\n* @memberof Degenerate.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var degenerate = new Degenerate( 40.0 );\n*\n* var v = degenerate.variance;\n* // returns 0.0\n*/\nsetReadOnlyAccessor( Degenerate.prototype, 'variance', function get() {\n\treturn variance( this.mu );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Degenerate.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var degenerate = new Degenerate( -0.5 );\n*\n* var v = degenerate.cdf( 1.5 );\n* // returns 1.0\n*/\nsetReadOnly( Degenerate.prototype, 'cdf', degenerateCDF );\n\n/**\n* Evaluates the natural logarithm of the cumulative distribution function (logCDF).\n*\n* @name logcdf\n* @memberof Degenerate.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logCDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var degenerate = new Degenerate( 3.0 );\n*\n* var v = degenerate.logcdf( 4.0 );\n* // returns 0.0\n*/\nsetReadOnly( Degenerate.prototype, 'logcdf', degenerateLogCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (logPDF).\n*\n* @name logpdf\n* @memberof Degenerate.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var degenerate = new Degenerate( -4.0 );\n*\n* var v = degenerate.logpdf( 4.0 );\n* // returns -Infinity\n*/\nsetReadOnly( Degenerate.prototype, 'logpdf', degenerateLogPDF );\n\n/**\n* Evaluates the natural logarithm of the probability mass function (logPMF).\n*\n* @name logpdf\n* @memberof Degenerate.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var degenerate = new Degenerate( 20.0 );\n*\n* var v = degenerate.logpmf( 20.0 );\n* // returns 0.0\n*/\nsetReadOnly( Degenerate.prototype, 'logpmf', degenerateLogPMF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Degenerate.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var degenerate = new Degenerate( 2.0 );\n*\n* var v = degenerate.mgf( -3.0 );\n* // returns ~0.002\n*/\nsetReadOnly( Degenerate.prototype, 'mgf', degenerateMGF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof Degenerate.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var degenerate = new Degenerate( 0.2 );\n*\n* var v = degenerate.pdf( 0.2 );\n* // returns +Infinity\n*\n* v = degenerate.pdf( 0.4 );\n* // returns 0.0\n*/\nsetReadOnly( Degenerate.prototype, 'pdf', degeneratePDF );\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @name pmf\n* @memberof Degenerate.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var degenerate = new Degenerate( 0.2 );\n*\n* var v = degenerate.pmf( 0.4 );\n* // returns 0.0\n*\n* v = degenerate.pmf( 0.2 );\n* // returns 1.0\n*/\nsetReadOnly( Degenerate.prototype, 'pmf', degeneratePMF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Degenerate.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var degenerate = new Degenerate( 0.2 );\n*\n* var v = degenerate.quantile( 0.9 );\n* // returns 0.2\n*/\nsetReadOnly( Degenerate.prototype, 'quantile', degenerateQuantile );\n\n\n// EXPORTS //\n\nmodule.exports = Degenerate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Degenerate distribution constructor.\n*\n* @module @stdlib/stats-base-dists-degenerate-ctor\n*\n* @example\n* var Degenerate = require( '@stdlib/stats-base-dists-degenerate-ctor' );\n*\n* var degenerate = new Degenerate( 0.0 );\n*\n* var y = degenerate.cdf( 0.5 );\n* // returns 1.0\n*\n* var median = degenerate.median;\n* // returns 0.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "defineProperty", "setReadOnly", "setReadOnlyAccessor", "isNumber", "isnan", "entropy", "mean", "mode", "median", "stdev", "variance", "cdf", "mgf", "pdf", "pmf", "logcdf", "logpdf", "logpmf", "quantile", "format", "degenerateCDF", "x", "degenerateLogCDF", "degenerateLogPDF", "degeneratePDF", "degenerateLogPMF", "degenerateMGF", "t", "degeneratePMF", "degenerateQuantile", "p", "Degenerate", "mu", "value", "main"]
}
